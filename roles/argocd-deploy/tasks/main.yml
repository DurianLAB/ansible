---
- name: Add Helm GPG key
  become: yes
  ansible.builtin.shell: |
    curl -fsSL https://packages.buildkite.com/helm-linux/helm-debian/gpgkey | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null

- name: Add Helm repository
  become: yes
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyrings/helm.gpg] https://packages.buildkite.com/helm-linux/helm-debian/any/ any main
    state: present

- name: Update apt cache
  become: yes
  ansible.builtin.apt:
    update_cache: yes

- name: Install Helm
  become: yes
  ansible.builtin.apt:
    name: helm
    state: present

- name: Ensure .kube directory exists for ansible user
  ansible.builtin.file:
    path: /home/ansible/.kube
    state: directory
    mode: '0755'

- name: Copy k3s kubeconfig
  become: yes
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/ansible/.kube/config
    remote_src: yes
    mode: '0600'

- name: Set ownership of kubeconfig
  become: yes
  ansible.builtin.file:
    path: /home/ansible/.kube/config
    owner: ansible
    group: ansible
    mode: '0600'

- name: Install kubernetes Python library
  become: yes
  ansible.builtin.pip:
    name: kubernetes
    state: present

- name: Add ArgoCD Helm repository
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    kubeconfig: /home/ansible/.kube/config

- name: Install ArgoCD
  kubernetes.core.helm:
    name: "{{ argocd_release_name }}"
    chart_ref: argo/argo-cd
    release_namespace: "{{ argocd_namespace }}"
    create_namespace: true
    values: "{{ argocd_helm_values | default({}) }}"
    chart_version: "{{ argocd_chart_version }}"
    state: present
    kubeconfig: /home/ansible/.kube/config

- name: Verify ArgoCD is running
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ argocd_namespace }}"
    label_selectors:
      - app.kubernetes.io/name=argocd-server
    kubeconfig: /home/ansible/.kube/config
  register: argocd_pods

- name: Check if ArgoCD server pod is ready
  assert:
    that: argocd_pods.resources | length > 0 and argocd_pods.resources[0].status.phase == 'Running'
    fail_msg: "ArgoCD server pod is not running"
